package com.liferay.museum.model.impl;

import com.liferay.museum.model.ExhibitVisit;
import com.liferay.museum.model.ExhibitVisitModel;
import com.liferay.museum.model.ExhibitVisitSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ExhibitVisit service. Represents a row in the &quot;Museum_ExhibitVisit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.museum.model.ExhibitVisitModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExhibitVisitImpl}.
 * </p>
 *
 * @author James Falkner
 * @see ExhibitVisitImpl
 * @see com.liferay.museum.model.ExhibitVisit
 * @see com.liferay.museum.model.ExhibitVisitModel
 * @generated
 */
@JSON(strict = true)
public class ExhibitVisitModelImpl extends BaseModelImpl<ExhibitVisit>
    implements ExhibitVisitModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a exhibit visit model instance should use the {@link com.liferay.museum.model.ExhibitVisit} interface instead.
     */
    public static final String TABLE_NAME = "Museum_ExhibitVisit";
    public static final Object[][] TABLE_COLUMNS = {
            { "exhibitVisitId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "exhibitName", Types.VARCHAR },
            { "visitorId", Types.VARCHAR },
            { "proximity", Types.VARCHAR },
            { "galleryName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Museum_ExhibitVisit (exhibitVisitId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,exhibitName VARCHAR(75) null,visitorId VARCHAR(75) null,proximity VARCHAR(75) null,galleryName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Museum_ExhibitVisit";
    public static final String ORDER_BY_JPQL = " ORDER BY exhibitVisit.createDate ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Museum_ExhibitVisit.createDate ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.museum.model.ExhibitVisit"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.museum.model.ExhibitVisit"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.museum.model.ExhibitVisit"),
            true);
    public static long GALLERYNAME_COLUMN_BITMASK = 1L;
    public static long CREATEDATE_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.museum.model.ExhibitVisit"));
    private static ClassLoader _classLoader = ExhibitVisit.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ExhibitVisit.class
        };
    private long _exhibitVisitId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _exhibitName;
    private String _visitorId;
    private String _proximity;
    private String _galleryName;
    private String _originalGalleryName;
    private long _columnBitmask;
    private ExhibitVisit _escapedModel;

    public ExhibitVisitModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ExhibitVisit toModel(ExhibitVisitSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ExhibitVisit model = new ExhibitVisitImpl();

        model.setExhibitVisitId(soapModel.getExhibitVisitId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setExhibitName(soapModel.getExhibitName());
        model.setVisitorId(soapModel.getVisitorId());
        model.setProximity(soapModel.getProximity());
        model.setGalleryName(soapModel.getGalleryName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ExhibitVisit> toModels(ExhibitVisitSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ExhibitVisit> models = new ArrayList<ExhibitVisit>(soapModels.length);

        for (ExhibitVisitSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _exhibitVisitId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setExhibitVisitId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _exhibitVisitId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ExhibitVisit.class;
    }

    @Override
    public String getModelClassName() {
        return ExhibitVisit.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("exhibitVisitId", getExhibitVisitId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("exhibitName", getExhibitName());
        attributes.put("visitorId", getVisitorId());
        attributes.put("proximity", getProximity());
        attributes.put("galleryName", getGalleryName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long exhibitVisitId = (Long) attributes.get("exhibitVisitId");

        if (exhibitVisitId != null) {
            setExhibitVisitId(exhibitVisitId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String exhibitName = (String) attributes.get("exhibitName");

        if (exhibitName != null) {
            setExhibitName(exhibitName);
        }

        String visitorId = (String) attributes.get("visitorId");

        if (visitorId != null) {
            setVisitorId(visitorId);
        }

        String proximity = (String) attributes.get("proximity");

        if (proximity != null) {
            setProximity(proximity);
        }

        String galleryName = (String) attributes.get("galleryName");

        if (galleryName != null) {
            setGalleryName(galleryName);
        }
    }

    @JSON
    @Override
    public long getExhibitVisitId() {
        return _exhibitVisitId;
    }

    @Override
    public void setExhibitVisitId(long exhibitVisitId) {
        _exhibitVisitId = exhibitVisitId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _columnBitmask = -1L;

        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getExhibitName() {
        if (_exhibitName == null) {
            return StringPool.BLANK;
        } else {
            return _exhibitName;
        }
    }

    @Override
    public void setExhibitName(String exhibitName) {
        _exhibitName = exhibitName;
    }

    @JSON
    @Override
    public String getVisitorId() {
        if (_visitorId == null) {
            return StringPool.BLANK;
        } else {
            return _visitorId;
        }
    }

    @Override
    public void setVisitorId(String visitorId) {
        _visitorId = visitorId;
    }

    @JSON
    @Override
    public String getProximity() {
        if (_proximity == null) {
            return StringPool.BLANK;
        } else {
            return _proximity;
        }
    }

    @Override
    public void setProximity(String proximity) {
        _proximity = proximity;
    }

    @JSON
    @Override
    public String getGalleryName() {
        if (_galleryName == null) {
            return StringPool.BLANK;
        } else {
            return _galleryName;
        }
    }

    @Override
    public void setGalleryName(String galleryName) {
        _columnBitmask |= GALLERYNAME_COLUMN_BITMASK;

        if (_originalGalleryName == null) {
            _originalGalleryName = _galleryName;
        }

        _galleryName = galleryName;
    }

    public String getOriginalGalleryName() {
        return GetterUtil.getString(_originalGalleryName);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            ExhibitVisit.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ExhibitVisit toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ExhibitVisit) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ExhibitVisitImpl exhibitVisitImpl = new ExhibitVisitImpl();

        exhibitVisitImpl.setExhibitVisitId(getExhibitVisitId());
        exhibitVisitImpl.setGroupId(getGroupId());
        exhibitVisitImpl.setCompanyId(getCompanyId());
        exhibitVisitImpl.setUserId(getUserId());
        exhibitVisitImpl.setUserName(getUserName());
        exhibitVisitImpl.setCreateDate(getCreateDate());
        exhibitVisitImpl.setModifiedDate(getModifiedDate());
        exhibitVisitImpl.setExhibitName(getExhibitName());
        exhibitVisitImpl.setVisitorId(getVisitorId());
        exhibitVisitImpl.setProximity(getProximity());
        exhibitVisitImpl.setGalleryName(getGalleryName());

        exhibitVisitImpl.resetOriginalValues();

        return exhibitVisitImpl;
    }

    @Override
    public int compareTo(ExhibitVisit exhibitVisit) {
        int value = 0;

        value = DateUtil.compareTo(getCreateDate(), exhibitVisit.getCreateDate());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ExhibitVisit)) {
            return false;
        }

        ExhibitVisit exhibitVisit = (ExhibitVisit) obj;

        long primaryKey = exhibitVisit.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ExhibitVisitModelImpl exhibitVisitModelImpl = this;

        exhibitVisitModelImpl._originalGalleryName = exhibitVisitModelImpl._galleryName;

        exhibitVisitModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<ExhibitVisit> toCacheModel() {
        ExhibitVisitCacheModel exhibitVisitCacheModel = new ExhibitVisitCacheModel();

        exhibitVisitCacheModel.exhibitVisitId = getExhibitVisitId();

        exhibitVisitCacheModel.groupId = getGroupId();

        exhibitVisitCacheModel.companyId = getCompanyId();

        exhibitVisitCacheModel.userId = getUserId();

        exhibitVisitCacheModel.userName = getUserName();

        String userName = exhibitVisitCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            exhibitVisitCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            exhibitVisitCacheModel.createDate = createDate.getTime();
        } else {
            exhibitVisitCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            exhibitVisitCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            exhibitVisitCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        exhibitVisitCacheModel.exhibitName = getExhibitName();

        String exhibitName = exhibitVisitCacheModel.exhibitName;

        if ((exhibitName != null) && (exhibitName.length() == 0)) {
            exhibitVisitCacheModel.exhibitName = null;
        }

        exhibitVisitCacheModel.visitorId = getVisitorId();

        String visitorId = exhibitVisitCacheModel.visitorId;

        if ((visitorId != null) && (visitorId.length() == 0)) {
            exhibitVisitCacheModel.visitorId = null;
        }

        exhibitVisitCacheModel.proximity = getProximity();

        String proximity = exhibitVisitCacheModel.proximity;

        if ((proximity != null) && (proximity.length() == 0)) {
            exhibitVisitCacheModel.proximity = null;
        }

        exhibitVisitCacheModel.galleryName = getGalleryName();

        String galleryName = exhibitVisitCacheModel.galleryName;

        if ((galleryName != null) && (galleryName.length() == 0)) {
            exhibitVisitCacheModel.galleryName = null;
        }

        return exhibitVisitCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(23);

        sb.append("{exhibitVisitId=");
        sb.append(getExhibitVisitId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", exhibitName=");
        sb.append(getExhibitName());
        sb.append(", visitorId=");
        sb.append(getVisitorId());
        sb.append(", proximity=");
        sb.append(getProximity());
        sb.append(", galleryName=");
        sb.append(getGalleryName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(37);

        sb.append("<model><model-name>");
        sb.append("com.liferay.museum.model.ExhibitVisit");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>exhibitVisitId</column-name><column-value><![CDATA[");
        sb.append(getExhibitVisitId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>exhibitName</column-name><column-value><![CDATA[");
        sb.append(getExhibitName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>visitorId</column-name><column-value><![CDATA[");
        sb.append(getVisitorId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>proximity</column-name><column-value><![CDATA[");
        sb.append(getProximity());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>galleryName</column-name><column-value><![CDATA[");
        sb.append(getGalleryName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
